require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const mysql = require("mysql2");
const nodemailer = require("nodemailer");


const app = express();
app.use(cors());
app.use(bodyParser.json());

const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  port: process.env.DB_PORT,
});
db.connect((err) => {
  if (err) console.error("Erreur de connexion √† MySQL:", err);
  else console.log("Connect√© √† MySQL");
});

// V√©rification de l‚Äô√©lecteur
app.post("/verify-elector", (req, res) => {
  const { numElecteur, numCNI, nom, bureauVote } = req.body;

  if (!numElecteur || !numCNI || !nom || !bureauVote) {
    return res.status(400).json({ error: "Tous les champs sont obligatoires" });
  }

  const query = `SELECT * FROM electeurs WHERE numero_carte_electeur = ? AND numero_carte_identite = ? AND nom = ? AND bureau_vote = ?`;
  
  db.query(query, [numElecteur, numCNI, nom, bureauVote], (err, result) => {
    if (err) return res.status(500).json({ error: "Erreur serveur" });
    if (result.length > 0) return res.json({ valid: true });
    res.json({ valid: false });
  });
});

// Enregistrement de l‚Äô√©lecteur et envoi du code OTP
app.post("/register-elector", (req, res) => {
  const { numElecteur, prenom, email, telephone } = req.body;

  if (!numElecteur || !prenom || !email || !telephone) {
    return res.status(400).json({ error: "Tous les champs sont obligatoires" });
  }

  const codeOTP = Math.floor(100000 + Math.random() * 900000);

  const query = `UPDATE electeurs SET prenom = ?, email = ?, telephone = ?, code_authentification = ? WHERE numero_carte_electeur = ?`;
  db.query(query, [prenom, email, telephone, codeOTP, numElecteur], async (err) => {
    if (err) return res.status(500).json({ error: "Erreur lors de l'inscription" });

    console.log("Mise √† jour r√©ussie pour l'√©lecteur :", numElecteur);

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER, //Utilisation des variables d'environnement
        pass: process.env.EMAIL_PASS,  
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Code de v√©rification",
      text: `Votre code de v√©rification est : ${codeOTP}`,
    };

    try {
      await transporter.sendMail(mailOptions);
      console.log("Email envoy√© !");
      res.json({ success: true });
    } catch (error) {
      console.error("Erreur d‚Äôenvoi d‚Äôemail:", error.message);
      res.status(500).json({ error: "√âchec d‚Äôenvoi de l‚Äôemail" });
    }
  });
});

// V√©rifier les identifiants de l‚Äô√©lecteur et r√©cup√©rer ses infos
app.post("/login-elector", (req, res) => {
  const { numElecteur, numCNI } = req.body;

  if (!numElecteur || !numCNI) {
    return res.status(400).json({ error: "Champs obligatoires" });
  }

  const query = `SELECT nom, prenom, DATE_FORMAT(date_naissance, '%Y-%m-%d') AS date_naissance, bureau_vote FROM electeurs WHERE numero_carte_electeur = ? AND numero_carte_identite = ?`;

  db.query(query, [numElecteur, numCNI], (err, result) => {
    if (err) return res.status(500).json({ error: "Erreur serveur" });

    if (result.length > 0) {
      res.json({ success: true, elector: result[0] });
    } else {
      res.json({ success: false, error: "Informations incorrectes" });
    }
  });
});

// V√©rifier le code OTP
app.post("/verify-otp", (req, res) => {
  const { numElecteur, code } = req.body;

  if (!numElecteur || !code) {
    return res.status(400).json({ error: "Champs obligatoires" });
  }

  const query = `SELECT * FROM electeurs WHERE numero_carte_electeur = ? AND code_authentification = ?`;

  db.query(query, [numElecteur, code], (err, result) => {
    if (err) return res.status(500).json({ error: "Erreur serveur" });

    if (result.length > 0) {
      res.json({ success: true });
    } else {
      res.json({ success: false, error: "Code incorrect" });
    }
  });
});

app.post("/parrainage", async (req, res) => {
  const { numElecteur } = req.body;

  if (!numElecteur) {
    return res.status(400).json({ error: "Le num√©ro d'√©lecteur est requis." });
  }

  try {
    console.log("Num√©ro d'√©lecteur re√ßu :", numElecteur);

    // üîπ V√©rification que l'√©lecteur existe
    const [electeur] = await db.query("SELECT email FROM electeurs WHERE numero_carte_electeur = ?", [numElecteur]);

    if (!electeur || !electeur.email) {
      console.error("√âlecteur non trouv√© dans la base de donn√©es.");
      return res.status(404).json({ error: `√âlecteur avec num√©ro ${numElecteur} non trouv√©.` });
    }

    const email = electeur.email;
    console.log(`Email trouv√© pour ${numElecteur} : ${email}`);

    // üîπ G√©n√©ration du code OTP (5 chiffres)
    const codeOTP = Math.floor(10000 + Math.random() * 90000);
    console.log(`Code OTP g√©n√©r√©: ${codeOTP}`);

    // üîπ Envoi de l'email avec l'OTP
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Code de v√©rification",
      text: `Votre code de v√©rification est : ${codeOTP}.`,
    };

    await transporter.sendMail(mailOptions);
    console.log(" Email envoy√© avec succ√®s !");

    // üîπ Stocker l'OTP dans la base de donn√©es avec une expiration , code_expiration = NOW() + INTERVAL 5 MINUTE   AND code_expiration > NOW()
    await db.query("UPDATE electeurs SET code_authentification = ? WHERE numero_carte_electeur = ?", 
      [codeOTP, numElecteur]
    );

    return res.json({ success: true, message: "Code envoy√© avec succ√®s." });

  } catch (error) {
    console.error(" Erreur lors de l'envoi de l'OTP :", error.message);
    return res.status(500).json({ error: "Erreur interne du serveur." });
  }
});


app.post("/verify-parrainage", (req, res) => {
  const { numElecteur, candidatId, code } = req.body;
  console.log("üîç Requ√™te re√ßue pour v√©rification :", req.body);

  if (!numElecteur || !candidatId || !code) {
    console.log("‚ùå Donn√©es manquantes !");
    return res.status(400).json({ error: "Donn√©es manquantes" });
  }

  // üîπ V√©rifier si l'OTP est correct
  db.query(
    "SELECT id, email FROM electeurs WHERE numero_carte_electeur = ? AND code_parrainage = ?",
    [numElecteur, code],
    (err, result) => {
      if (err) {
        console.error("‚ùå Erreur lors de la v√©rification de l'OTP :", err.message);
        return res.status(500).json({ error: "Erreur serveur" });
      }

      if (!result.length) {
        console.log("‚ùå Code OTP incorrect.");
        return res.status(400).json({ error: "Code OTP incorrect." });
      }

      const electeur = result[0];
      console.log("‚úÖ √âlecteur trouv√© :", electeur);

      // üîπ V√©rifier si le candidat existe
      db.query("SELECT id FROM candidat WHERE id = ?", [candidatId], (candidatErr, candidatResult) => {
        if (candidatErr) {
          console.error("‚ùå Erreur lors de la v√©rification du candidat :", candidatErr.message);
          return res.status(500).json({ error: "Erreur serveur" });
        }

        if (!candidatResult.length) {
          console.log("‚ùå Candidat inexistant !");
          return res.status(400).json({ error: "Candidat inexistant." });
        }

        // üîπ V√©rifier si l'√©lecteur a d√©j√† parrain√© quelqu'un
        db.query("SELECT id FROM parrainage_valide WHERE electeur_id = ?", [electeur.id], (checkErr, checkResult) => {
          if (checkErr) {
            console.error("‚ùå Erreur lors de la v√©rification du parrainage :", checkErr.message);
            return res.status(500).json({ error: "Erreur serveur" });
          }

          if (checkResult.length) {
            console.log("‚ùå L'√©lecteur a d√©j√† parrain√© un candidat !");
            return res.status(400).json({ error: "Vous avez d√©j√† parrain√© un candidat." });
          }

          // üîπ Ins√©rer le parrainage
          db.query(
            "INSERT INTO parrainage_valide (electeur_id, candidat_id) VALUES (?, ?)",
            [electeur.id, candidatId],
            (insertErr) => {
              if (insertErr) {
                console.error("‚ùå Erreur lors de l'enregistrement du parrainage :", insertErr.message);
                return res.status(500).json({ error: "Erreur serveur" });
              }

              console.log("‚úÖ Parrainage enregistr√© avec succ√®s pour", numElecteur);

              // ‚úÖ Envoyer une r√©ponse AVANT d'envoyer l'email
              res.json({ success: true, message: "Parrainage valid√© avec succ√®s !" });

              // üîπ Envoi de l'email en arri√®re-plan (sans bloquer la r√©ponse)
              sendConfirmation(electeur.email, candidatId, (emailErr) => {
                if (emailErr) {
                  console.error("‚ùå Erreur d'envoi de l'email de confirmation :", emailErr.message);
                } else {
                  console.log("üì© Email de confirmation envoy√© !");
                }
              });
            }
          );
        });
      });
    }
  );
});


// üîπ Fonction pour envoyer un email de confirmation
async function sendConfirmation(email, candidatId) {
  const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
      },
  });

  const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Confirmation de votre parrainage",
      text: `Votre parrainage pour le candidat ID: ${candidatId} a bien √©t√© enregistr√©.`,
  };

  try {
      await transporter.sendMail(mailOptions);
      console.log("‚úÖ Email de confirmation envoy√© !");
  } catch (error) {
      console.error("‚ùå Erreur d‚Äôenvoi de l‚Äôemail de confirmation :", error.message);
  }
}


app.get("/candidats", (_req, res) => {
  const query = "SELECT id, nom, prenom, slogan, couleur1, couleur2, couleur3, photo FROM candidat";
  db.query(query, (err, result) => {
    if (err) {
      return res.status(500).json({ error: "Erreur lors de la r√©cup√©ration des candidats" });
    }
    res.json(result);
  });
});

app.post('/send-otp', (req, res) => {
  console.log("Requ√™te re√ßue pour envoyer l'OTP :", req.body);

  const { candidatId, numElecteur } = req.body;

  // V√©rification des donn√©es re√ßues
  if (!candidatId || !numElecteur) {
      return res.status(400).json({ error: "Donn√©es manquantes" });
  }

  // üîπ Recherche de l'√©lecteur dans la base de donn√©es
  db.query(
      "SELECT email FROM electeurs WHERE numero_carte_electeur = ?", 
      [numElecteur], 
      (err, result) => {
          if (err) {
              console.error("Erreur lors de la r√©cup√©ration de l'email :", err);
              return res.status(500).json({ error: "Erreur serveur" });
          }

          if (!result.length) {
              return res.status(404).json({ error: "√âlecteur non trouv√©" });
          }

          const email = result[0].email;
          console.log(`Email trouv√© pour ${numElecteur} : ${email}`);

          // üîπ G√©n√©ration du code OTP
          const codeOTP = Math.floor(10000 + Math.random() * 90000);
          console.log(`Code OTP g√©n√©r√©: ${codeOTP}`);

          // üîπ Configuration et envoi de l'email
          const transporter = nodemailer.createTransport({
              service: "gmail",
              auth: {
                  user: process.env.EMAIL_USER,
                  pass: process.env.EMAIL_PASS,
              },
          });

          const mailOptions = {
              from: process.env.EMAIL_USER,
              to: email,
              subject: "Code de v√©rification",
              text: `Votre code pour le parrainage est : ${codeOTP}`,
          };

          transporter.sendMail(mailOptions, (emailErr, info) => {
              if (emailErr) {
                  console.error("Erreur d‚Äôenvoi d‚Äôemail:", emailErr.message);
                  return res.status(500).json({ error: "√âchec d‚Äôenvoi de l‚Äôemail" });
              }

              console.log("Email envoy√© avec succ√®s :", info.response);
              
              // üîπ Stocker le code OTP dans la table 'electeurs' (colonne 'code_parrainage')
              db.query(
                "UPDATE electeurs SET code_parrainage = ? WHERE numero_carte_electeur = ?", 
                [codeOTP, numElecteur], 
                (updateErr) => {
                    if (updateErr) {
                        console.error("Erreur lors de la mise √† jour de l'OTP dans la table electeurs :", updateErr);
                        return res.status(500).json({ error: "Erreur serveur" });
                    }

                      return res.json({ success: true, message: "Code envoy√© avec succ√®s." });
                  }
              );
          });
      }
  );
});

app.listen(5000, () => console.log("Serveur d√©marr√© sur le port 5000"));
